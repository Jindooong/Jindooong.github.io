<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown简明指南</title>
    <url>/2020/09/24/Markdown%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 align= 'center'>Hexo Markdown简明指南</h1>  

<p><img src="/image/markdownlogo.jpg">  </p>
<h2 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<a id="more"></a>
<h2 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h2><ol>
<li><p>标题<br> 使用<code>#</code>号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。<br> 例如：  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<p> 效果如下：</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li>
<li><p>段落格式</p>
<ul>
<li>段落：<br>  Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。当然也可以在段落后面使用一个空行来表示重新开始一个段落。  </li>
<li>字体：<br>  Markdown 可以使用以下几种字体：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">**粗体文本**</span><br><span class="line">***粗斜体文本***</span><br></pre></td></tr></table></figure>
  效果如下：<br>  <em>斜体文本</em> ，<strong>粗体文本</strong>，<strong><em>粗斜体文本</em></strong> 。 注意：粗斜体文本在某些地方不适用。  </li>
<li>分割线：<br>  可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">----------</span><br></pre></td></tr></table></figure>
  效果如下：  <hr>
<hr>
<hr>
<hr>
<hr>
</li>
<li>删除线：<br>  如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <del>~ 即可，如：</del>Hello Markdown~~    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~Hello Markdown~~</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>列表<br> Markdown 支持有序列表和无序列表。<br> 无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>
<p> 有序列表使用数字并加上 . 号来表示，如：  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure></li>
<li><p>区块<br> Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 这里是区块展示</span><br><span class="line">这里是区块展示</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里是区块展示<br> 这里是区块展示  </p>
</blockquote>
<p> 另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
</li>
<li><p>代码<br> 如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：<code>print(Hello world)</code></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;print(Hello world)&#96;</span><br></pre></td></tr></table></figure>
<p> 代码区块用```包裹一段代码，并指定一种语言（也可以不指定）：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&#96;&#96;&#96;python  </span><br><span class="line">    import time  </span><br><span class="line">    for i in range(10):  </span><br><span class="line">            time.sleep(i)  </span><br><span class="line">            print(i)  </span><br><span class="line">\&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>

 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    time.sleep(i)</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li>
<li><p>链接<br> 链接使用方法如下：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[baidu](https:&#x2F;&#x2F;www.baidu.com&#x2F;) 或</span><br><span class="line">&lt;https:&#x2F;&#x2F;www.baidu.com&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p> <a href="https://www.baidu.com/" target="_blank" rel="noopener">baidu</a> 或<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a>    </p>
</li>
<li><p>图片<br> Markdown 图片语法格式如下：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>表格<br> Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<p> 还可以设置表格的对齐方式：  </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
</li>
<li><p>高级技巧<br> 高级技巧包括支持html元素，LaTeX 格式的数学公式，以及流程图、时序图(顺序图)、甘特图等，需要用到时在记录。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客简明指南</title>
    <url>/2020/09/23/hexo%E5%8D%9A%E5%AE%A2%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 align= 'center'>Hexo 博客简明指南</h1>  

<p><img src="/image/hexo.png" alt="快速搭建博客">  </p>
<h2 id="hexo-简介"><a href="#hexo-简介" class="headerlink" title="hexo 简介"></a>hexo 简介</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。  </p>
<a id="more"></a>
<h2 id="hexo搭建步骤"><a href="#hexo搭建步骤" class="headerlink" title="hexo搭建步骤"></a>hexo搭建步骤</h2><ol>
<li>安装git<br> Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。更多git使用技巧可访问<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰git教程</a>进行学习。<br> windows系统用户可访问Git<a href="https://gitforwindows.org/" target="_blank" rel="noopener">官方网站</a>下载安装包安装。<br> liunx系统用户可直接使用<code>apt-get</code>命令进行安装。<br><code>sudo apt-get install git</code></li>
<li>安装Node.js<br> Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。简单的说 Node.js 就是运行在服务端的 JavaScript。更多关于Node.js使用技巧可访问<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">Node.js中文网</a>。<br> windows系统用户可访问Node.js<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网网站</a>下载安装。<br> liunx系统用户可直接使用<code>apt-get</code>命令进行安装。<br> <code>sudo apt-get install nodejs</code><br> <code>sudo apt-get install npm</code><br> 安装后查看nodejs与npm版本,检测是否安装成功。<br> <code>node -v</code><br> <code>npm -v</code></li>
<li>安装Hexo<br> 在合适的位置创建一个用于存放博客文件的文件夹<code>blog</code>，在该目录下打开<code>git bash</code>。输入命令:<br> <code>npm install -g hexo-cli</code><br> 至此，以全部安装完成。初始化hexo目录：<br> <code>hexo init blog</code><br> <code>cd blog</code><br> <code>npm install</code><br> 初始化完成后，可以看到blog文件夹下目录结构为：   <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|-- blog</span><br><span class="line"><span class="code">    |-- _config.yml     博客配置文件</span></span><br><span class="line"><span class="code">    |-- public          存放生成的页面</span></span><br><span class="line"><span class="code">    |-- source          存放博客文章</span></span><br><span class="line"><span class="code">    |-- themes          博客主题</span></span><br><span class="line"><span class="code">    |-- scaffolds       生成文章的一些模板</span></span><br></pre></td></tr></table></figure>
 初始化后，打开hexo服务:<br> <code>hexo g</code><br> <code>hexo server</code><br> 在浏览器中输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>即可查看生成的博客。  </li>
<li>Github创建个人仓库<br> 首先需要在GitHub上创建一个账户，新建一个与用户名同名的仓库，后面加上<code>.github.io</code>，这样部署到Github page时可被识别到。例如：<code>Jindooong.github.io</code></li>
<li>生成SSH添加到Github<br> 在git bash 中输入命令： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure>
 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。可以用以下两条命令，检查一下你有没有输对。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
 创建SSH。<br> ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。输入命令：<br> <code>ssh-keygen -t rsa -C &quot;youremail&quot;</code><br> 此时以生成ssh文件夹。而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key把你的id_rsa.pub里面的信息复制进去。<br> 在gitbash中输入命令，查看是否成功。<br> <code>ssh -T git@github.com</code></li>
<li>将hexo部署到Github<br> 此时我们需要将hexo和GitHub关联起来，即将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<code>YourgithubName</code>就是你的GitHub账户。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>
 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。<br> <code>npm install hexo-deployer-git --save</code><br> 之后通过下述命令即可将博客部署到GitHub上。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean      #清除了你之前生成的东西</span><br><span class="line">hexo generate   #生成静态文章，可以用 hexo g缩写</span><br><span class="line">hexo deploy     #部署文章，可以用hexo d缩写</span><br></pre></td></tr></table></figure></li>
<li>设置个人域名<br> (挖个坑，暂时未考虑。)</li>
<li>发布文章<br> Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source文件夹。<ul>
<li>通过<code>hexo new new papername</code>命令可以在<code>source/_post</code>中生成一个新markdown文本。  </li>
<li>如果需要另起一页可以通过<code>hexo new page board</code>系统会自动给你在source文件夹下创建一个board文件夹，以及board文件夹中的index.md，这样你访问的board对应的链接就是<a href="http://xxx.xxx/board" target="_blank" rel="noopener">http://xxx.xxx/board</a>。</li>
<li>如果想写文章，又不希望被看到,可以通过<code>hexo new draft newpage</code>创建草稿文件，这样会在<code>source/_draft</code>中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用<code>hexo server --draft</code>在本地端口中开启服务预览。如果你的草稿文件写完了，想要发表到post中，可以通过<code>hexo publish draft newpage</code>命令自动把newpage.md发送到post中。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
